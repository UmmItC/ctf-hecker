---
import { Image } from 'astro:assets';

interface Props {
	author: string;
	size?: 'sm' | 'md' | 'lg';
	avatar?: string;
}

const { author, size = 'md', avatar } = Astro.props;

const getInitials = (name: string) => {
	return name
		.split(' ')
		.map(word => word.charAt(0).toUpperCase())
		.slice(0, 2)
		.join('');
};

const sizeClasses = {
	sm: 'w-8 h-8 text-sm',
	md: 'w-10 h-10 text-base',
	lg: 'w-12 h-12 text-lg'
};

const imageDimensions = {
	sm: { width: 128, height: 128 },
	md: { width: 160, height: 160 },
	lg: { width: 192, height: 192 }
};

const initials = getInitials(author);

const isExternalUrl = avatar && (avatar.startsWith('http') || avatar.startsWith('@http'));
let externalAvatarUrl = null;
let authorImage = null;

if (isExternalUrl) {
	externalAvatarUrl = avatar.startsWith('@') ? avatar.substring(1) : avatar;
} else {
	try {
		if (avatar) {
			authorImage = await import(/* @vite-ignore */ `../assets/authors/${avatar}`);
		} else {
			const imageName = author.toLowerCase().replace(/\s+/g, '-');
			authorImage = await import(/* @vite-ignore */ `../assets/authors/${imageName}.png`);
		}
	} catch (error) {
		authorImage = null;
	}
}
---

<div class={`${sizeClasses[size]} rounded-full overflow-hidden shadow-lg relative`}>
	{externalAvatarUrl ? (
		<img 
			src={externalAvatarUrl} 
			alt={`${author} avatar`} 
			class="w-full h-full object-cover"
			width={imageDimensions[size].width}
			height={imageDimensions[size].height}
			loading="lazy"
			referrerpolicy="no-referrer"
		/>
	) : authorImage ? (
		<Image 
			src={authorImage.default} 
			alt={`${author} avatar`} 
			class="w-full h-full object-cover"
			width={imageDimensions[size].width}
			height={imageDimensions[size].height}
			quality={80}
			format="webp"
		/>
	) : (
		<div class="w-full h-full flex items-center justify-center text-white font-semibold" style="background: linear-gradient(90.6deg, rgb(59, 158, 255) -1.2%, rgb(246, 135, 255) 91.6%);">
			<span>{initials}</span>
		</div>
	)}
</div> 