---
import BaseHead from '../components/BaseHead.astro';
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';
import AuthorAvatar from '../components/AuthorAvatar.astro';
import { SITE_TITLE, SITE_DESCRIPTION } from '../consts';
import { getCollection } from 'astro:content';
import FormattedDate from '../components/FormattedDate.astro';


const posts = (await getCollection('blog')).sort(
	(a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
);

// Pagination settings
const POSTS_PER_PAGE = 6;
const initialPosts = posts.slice(0, POSTS_PER_PAGE);
const hasMore = posts.length > POSTS_PER_PAGE;

const litePosts = posts.map((p) => ({
    id: p.id,
    data: {
        title: p.data.title,
        description: p.data.description,
        pubDate: p.data.pubDate,
        author: p.data.author,
    }
}));

const normalizeAuthors = (author: any) => {
	if (!author) return [];
	if (typeof author === 'string') return [{ name: author, avatar: undefined }];
	if (Array.isArray(author)) {
		return author.map((a: any) => typeof a === 'string' ? { name: a, avatar: undefined } : a);
	}
	return [];
};
---

<!doctype html>
<html lang="en" class="scroll-smooth">
	<head>
		<BaseHead title={`${SITE_TITLE} - The Blog where you write your thoughts`} description={SITE_DESCRIPTION} />
        <style>
			@reference "tailwindcss";

			@keyframes spin {
				0% { transform: rotate(0deg); }
				100% { transform: rotate(360deg); }
			}

			.glow-border {
				--b: 2px;
				border: var(--b) solid transparent;
				border-radius: 9999px;
				background:
					linear-gradient(rgba(18, 18, 28, 0.9), rgba(15, 23, 42, 0.95)) padding-box,
					linear-gradient(to right, #a855f7, #c084fc) border-box;
				background-clip: padding-box, border-box;
				background-origin: padding-box, border-box;
				box-shadow: 0 0 12px rgba(168, 85, 247, 0.6);
			}

			.terminal-cursor {
				padding-bottom: 1px;
				border-bottom: 2px solid transparent;
				animation: blink 1.2s step-end infinite;
			}

			@keyframes blink {
				from, to {
					border-bottom-color: transparent;
				}
				50% {
					border-bottom-color: #e5e7eb;
				}
			}

			.fade-in {
				animation: fadeIn 0.5s ease-in-out;
			}
			@keyframes fadeIn {
				from { opacity: 0; transform: translateY(20px); }
				to { opacity: 1; transform: translateY(0); }
			}
			
			/* Page load fade-in animation */
			body {
				opacity: 0;
				animation: pageLoad 0.3s ease-out forwards;
			}
			
			@keyframes pageLoad {
				0% { 
					opacity: 0; 
					transform: translateY(15px);
				}
				100% { 
					opacity: 1; 
					transform: translateY(0);
				}
			}
			
			/* Staggered animations for different sections */
			.page-header {
				opacity: 0;
				animation: slideInUp 0.3s ease-out 0.05s forwards;
			}
			
			.posts-grid {
				opacity: 0;
				animation: slideInUp 0.3s ease-out 0.1s forwards;
			}
			
			.post-card {
				opacity: 0;
				animation: slideInUp 0.25s ease-out forwards;
			}
			
			.post-card:nth-child(1) { animation-delay: 0.15s; }
			.post-card:nth-child(2) { animation-delay: 0.2s; }
			.post-card:nth-child(3) { animation-delay: 0.25s; }
			.post-card:nth-child(4) { animation-delay: 0.3s; }
			.post-card:nth-child(5) { animation-delay: 0.35s; }
			.post-card:nth-child(6) { animation-delay: 0.4s; }
			.post-card:nth-child(n+7) { animation-delay: 0.45s; }
			
			@keyframes slideInUp {
				0% { 
					opacity: 0; 
					transform: translateY(20px);
				}
				100% { 
					opacity: 1; 
					transform: translateY(0);
				}
			}
		</style>
	</head>
	<body class="font-sans m-0 p-0 text-left min-h-screen text-gray-200 text-base leading-relaxed overflow-x-hidden relative"
		  style="background: linear-gradient(135deg, #000000 0%, #51317e 100%); background-attachment: fixed;">
		
		<!-- Removed grid overlay div for pure background -->
		<Header />
		<main transition:animate="slide" class="w-full max-w-6xl mx-auto px-4 py-8 relative z-[2] min-h-[calc(100vh-120px)]">
			<!-- Page Header -->
			<section class="page-header text-center py-16 mb-12">
				<h1 class="text-5xl font-extrabold mb-4 text-[#9082CE]">
					Blog
				</h1>
				<p class="text-gray-400 text-lg max-w-2xl mx-auto">
					Thoughts, tutorials, and insights about cybersecurity, GNU/Linux, and technology.
				</p>
				<div class="flex items-center justify-center gap-2 mt-4 mb-6">
					<div class="glow-border px-6 py-4 w-80">
						<div class="text-sm text-gray-200 font-mono text-center">
							<div>
								<span id="post-count" class="text-gray-200 font-extrabold">{posts.length}</span>
								{posts.length === 1 ? 'article' : 'articles'} You wrote :D
							</div>
							<div id="status-message" class="mt-1 text-gray-400 italic"></div>
						</div>
					</div>
				</div>
				<div class="w-24 h-1 bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 mx-auto rounded-full"></div>
			</section>

			<!-- Blog Posts Grid -->
			<section class="posts-grid">
				<div id="posts-container" class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
					{
						initialPosts.map((post, index) => (
							<article class={`post-card group relative overflow-hidden rounded-2xl bg-slate-900/60 backdrop-blur-sm border border-slate-700/50 transition-all duration-300 hover:bg-slate-900/80 hover:transform hover:scale-105 ${index === 0 ? 'md:col-span-2 lg:col-span-3' : ''}`}>
								<a href={`/blog/${post.id}/`} class="block">
									
									
									<div class="p-6">
										<div class="flex items-center gap-2 text-xs text-gray-400 font-mono mb-3">
											<svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
												<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
											</svg>
											<FormattedDate date={post.data.pubDate} />
											<span class="text-gray-500">•</span>
											<span class="text-gray-500">3 min read</span>
										</div>
										
										{/* Author section */}
										{normalizeAuthors(post.data.author).length > 0 && (
											<div class="flex items-center gap-2 mb-3">
												{normalizeAuthors(post.data.author).map((authorObj) => (
													<div class="flex items-center gap-1.5">
														<AuthorAvatar author={authorObj.name} avatar={authorObj.avatar} size="sm" />
														<span class="text-xs text-gray-300 font-medium">{authorObj.name}</span>
													</div>
												))}
											</div>
										)}
										
										<h2 class={`font-bold text-gray-100 mb-3 group-hover:text-[#9082CE] transition-colors duration-300 leading-tight ${index === 0 ? 'text-2xl md:text-3xl' : 'text-xl'}`}>
											{post.data.title}
										</h2>
										
										{post.data.description && (
											<p class="text-gray-400 text-sm leading-relaxed mb-4 line-clamp-3">
												{post.data.description}
											</p>
										)}
										
										<div class="flex items-center justify-end">
											<span class="text-pink-400 text-sm font-medium group-hover:text-purple-400 transition-colors duration-300">
												Read more →
											</span>
										</div>
									</div>
									
									<!-- Hover glow effect -->
									<div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
								</a>
							</article>
						))
					}
				</div>

				<!-- Load More Button -->
				{hasMore && (
					<div class="text-center mt-16">
						<button 
							type="button"
							id="load-more-btn"
							class="inline-flex items-center gap-3 px-8 py-4 bg-gradient-to-r from-[#9082CE] to-pink-400 text-white rounded-xl font-semibold transition-all duration-300 hover:from-pink-400 hover:to-purple-500 hover:scale-105 disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:scale-100 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 focus:ring-offset-slate-900"
							aria-label="Load more blog posts"
						>
							<span id="load-more-text">Load More Posts</span>
							<div id="loading-spinner" class="loading-spinner hidden"></div>
							<svg id="load-more-icon" class="w-5 h-5 transition-transform duration-300" fill="none" stroke="currentColor" viewBox="0 0 24 24">
								<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 14l-7 7m0 0l-7-7m7 7V3"/>
							</svg>
						</button>
					</div>
				)}
			</section>
		</main>
		<Footer />

		<script define:vars={{ posts: litePosts, POSTS_PER_PAGE }}>
			function initHomePage() {
				if (document.body.dataset.homeInitialized) return;
				document.body.dataset.homeInitialized = 'true';

				let currentPage = 1;
				let isLoading = false;
				
				const loadMoreBtn = document.getElementById('load-more-btn');
				const loadMoreText = document.getElementById('load-more-text');
				const loadingSpinner = document.getElementById('loading-spinner');
				const loadMoreIcon = document.getElementById('load-more-icon');
				const postsContainer = document.getElementById('posts-container');

				if (!postsContainer) {
					delete document.body.dataset.homeInitialized;
					return;
				}

				function formatDate(date) {
					return new Date(date).toLocaleDateString('en-US', {
						year: 'numeric',
						month: 'short',
						day: 'numeric'
					});
				}

				function createPostCard(post, index) {
					const isFirst = index === 0;
					
					const normalizeAuthors = (author) => {
						if (!author) return [];
						if (typeof author === 'string') return [{ name: author, avatar: undefined }];
						if (Array.isArray(author)) {
							return author.map(a => typeof a === 'string' ? { name: a, avatar: undefined } : a);
						}
						return [];
					};
					
					const createAuthorHTML = (authors) => {
						if (!authors.length) return '';
						return `
							<div class="flex items-center gap-2 mb-3">
								${authors.map(authorObj => `
									<div class="flex items-center gap-1.5">
										<div class="w-6 h-6 rounded-full bg-gradient-to-br from-purple-500 to-pink-500 flex items-center justify-center text-white font-semibold text-xs">
											<span>${authorObj.name.split(' ').map(word => word.charAt(0).toUpperCase()).slice(0, 2).join('')}</span>
										</div>
										<span class="text-xs text-gray-300 font-medium">${authorObj.name}</span>
									</div>
								`).join('')}
							</div>
						`;
					};
					
					const authors = normalizeAuthors(post.data.author);
					
					return `
						<article class="post-card group relative overflow-hidden rounded-2xl bg-slate-900/60 backdrop-blur-sm border border-slate-700/50 transition-all duration-300 hover:bg-slate-900/80 hover:transform hover:scale-105 fade-in">
							<a href="/blog/${post.id}/" class="block">

								
								<div class="p-6">
									<div class="flex items-center gap-2 text-xs text-gray-400 font-mono mb-3">
										<svg class="w-4 h-4 text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
											<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"/>
										</svg>
										<span>${formatDate(post.data.pubDate)}</span>
										<span class="text-gray-500">•</span>
										<span class="text-gray-500">3 min read</span>
									</div>
									
									${createAuthorHTML(authors)}
									
									<h2 class="font-bold text-gray-100 mb-3 group-hover:text-[#9082CE] transition-colors duration-300 leading-tight text-xl">
										${post.data.title}
									</h2>
									
									${post.data.description ? `
										<p class="text-gray-400 text-sm leading-relaxed mb-4 line-clamp-3">
											${post.data.description}
										</p>
									` : ''}
									
									<div class="flex items-center justify-end">
										<span class="text-pink-400 text-sm font-medium group-hover:text-purple-400 transition-colors duration-300">
											Read more →
										</span>
									</div>
								</div>
								
								<!-- Hover glow effect -->
								<div class="absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-purple-500 via-pink-500 to-blue-500 opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
							</a>
						</article>
					`;
				}

				function loadMorePosts() {
					if (isLoading) return;
					
					isLoading = true;
					loadMoreBtn.disabled = true;
					loadMoreText.textContent = 'Loading...';
					loadingSpinner.classList.remove('hidden');
					loadMoreIcon.classList.add('hidden');

					setTimeout(() => {
						const startIndex = currentPage * POSTS_PER_PAGE;
						const endIndex = startIndex + POSTS_PER_PAGE;
						const newPosts = posts.slice(startIndex, endIndex);
						
						newPosts.forEach((post, index) => {
							const postCard = createPostCard(post, startIndex + index);
							postsContainer.insertAdjacentHTML('beforeend', postCard);
						});

						currentPage++;
						isLoading = false;
						loadMoreBtn.disabled = false;
						loadMoreText.textContent = 'Load More Posts';
						loadingSpinner.classList.add('hidden');
						loadMoreIcon.classList.remove('hidden');

						if (endIndex >= posts.length) {
							loadMoreBtn.style.display = 'none';
						}
					}, 800);
				}

				if (loadMoreBtn) {
					loadMoreBtn.addEventListener('click', function(event) {
						event.preventDefault();
						event.stopPropagation();
						loadMorePosts();
					});

					loadMoreBtn.addEventListener('keydown', function(event) {
						if (event.key === 'Enter' || event.key === ' ') {
							event.preventDefault();
							event.stopPropagation();
							loadMorePosts();
						}
					});

					// Touch support for mobile
					loadMoreBtn.addEventListener('touchstart', function(event) {
						event.preventDefault();
					});

					loadMoreBtn.addEventListener('touchend', function(event) {
						event.preventDefault();
						event.stopPropagation();
						loadMorePosts();
					});
				}

				let scrollTimeout;
				const scrollHandler = function() {
					clearTimeout(scrollTimeout);
					scrollTimeout = setTimeout(function() {
						if (isLoading) return;
						
						try {
							const { scrollTop, scrollHeight, clientHeight } = document.documentElement;
							if (scrollTop + clientHeight >= scrollHeight - 800) {
								if (loadMoreBtn && loadMoreBtn.style.display !== 'none') {
									loadMorePosts();
								}
							}
						} catch (error) {
							console.warn('Scroll handler error:', error);
						}
					}, 100);
				};
				window.addEventListener('scroll', scrollHandler, { passive: true });

				// Typing effect for post count
				const countElement = document.getElementById('post-count');
				const statusMessageElement = document.getElementById('status-message');

				if (countElement && statusMessageElement) {
					const finalCount = posts.length;
					countElement.classList.remove('terminal-cursor');
					const addCursor = () => countElement.classList.add('terminal-cursor');

					const setStatusMessage = () => {
						let message = '';
						if (finalCount > 1000) {
							message = '... Blogging is a lifestyle right?';
						} else if (finalCount > 500) {
							message = '... A true legend of the craft!';
						} else if (finalCount > 200) {
							message = '... An unstoppable force of knowledge!';
						} else if (finalCount > 100) {
							message = '... Wow, a true knowledge base!';
						} else if (finalCount > 50) {
							message = '... You\'re a seasoned blogger now!';
						} else if (finalCount > 20) {
							message = '... Building some serious momentum!';
						} else if (finalCount > 5) {
							message = '... Great start, keep it up!';
						} else if (finalCount > 0) {
							message = '... Blogger journey begins!';
						} else {
							message = '';
						}
						statusMessageElement.textContent = message;
						if (message === '') {
							const parent = statusMessageElement.parentElement;
							if (parent) parent.style.minHeight = 'auto'; // Adjust height
						}
					};

					if (finalCount > 0) {
						let currentCount = 0;
						countElement.textContent = '0';
						const updateCount = () => {
							if (currentCount < finalCount) {
								currentCount++;
								countElement.textContent = currentCount;
								setTimeout(updateCount, 100);
							} else {
								addCursor();
								setStatusMessage();
							}
						};
						setTimeout(updateCount, 300);
					} else {
						countElement.textContent = '0';
						addCursor();
						setStatusMessage();
					}
				}

				// Cleanup listeners when navigating away
				document.addEventListener('astro:before-swap', () => {
					window.removeEventListener('scroll', scrollHandler);
					delete document.body.dataset.homeInitialized;
				}, { once: true });
			}
			
					document.addEventListener('astro:page-load', initHomePage);
					document.addEventListener('DOMContentLoaded', initHomePage);
		</script>
	</body>
</html>
